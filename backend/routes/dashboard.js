const express = require('express');
const router = express.Router(); // <--- FIX 1: Defines the router
const auth = require('../middleware/auth');
const Member = require('../models/Member');
const Zone = require('../models/Zone');

// ðŸ”¹ Helper: compute zone distribution with aggregation
// This is used by your /zones-distribution route
async function getZoneDistribution() {
Â  return Member.aggregate([
Â  Â  {
Â  Â  Â  $group: {
Â  Â  Â  Â  _id: "$zone",
Â  Â  Â  Â  totalPeople: {
Â  Â  Â  Â  Â  $sum: { $add: [1, { $size: { $ifNull: ["$familyMembers", []] } }] }
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  },
Â  Â  {
Â  Â  Â  $lookup: {
Â  Â  Â  Â  from: "zones",
Â  Â  Â  Â  localField: "_id",
Â  Â  Â  Â  foreignField: "_id",
Â  Â  Â  Â  as: "zone"
Â  Â  Â  }
Â  Â  },
Â  Â  { $unwind: "$zone" },
Â  Â  {
Â  Â  Â  $project: {
Â  Â  Â  Â  _id: 0,
Â  Â  Â  Â  name: "$zone.name",
Â  Â  Â  Â  totalPeople: 1
Â  Â  Â  }
Â  Â  }
Â  ]);
}

// Main Dashboard Data
// FIX 2: This route uses the efficient aggregation for all stats
router.get('/', auth, async (req, res) => {
Â  try {
Â  Â  // These two counts are fast
Â  Â  const totalMembers = await Member.countDocuments(); // Total families
Â  Â  const totalZones = await Zone.countDocuments();

Â  Â  // Single aggregation for all other stats
Â  Â  const statsAgg = await Member.aggregate([
Â  Â  Â  { 
Â  Â  Â  Â  $addFields: {
Â  Â  Â  Â  Â  // Create a single array of all people (head + family)
Â  Â  Â  Â  Â  allPeople: { 
Â  Â  Â  Â  Â  Â  $concatArrays: [ 
Â  Â  Â  Â  Â  Â  Â  ["$head"], // Put head in its own array
Â  Â  Â  Â  Â  Â  Â  { $ifNull: ["$familyMembers", []] } // Add the family members
Â  Â  Â  Â  Â  Â  ] 
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  $facet: {
Â  Â  Â  Â  Â  // Pipeline 1: Get counts for male, female
Â  Â  Â  Â  Â  "genderCounts": [
Â  Â  Â  Â  Â  Â  { $unwind: "$allPeople" }, // Create one doc per person
Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  $group: {
Â  Â  Â  Â  Â  Â  Â  Â  _id: "$allPeople.gender", // Group by 'male' or 'female'
Â  Â  Â  Â  Â  Â  Â  Â  count: { $sum: 1 }
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  // Pipeline 2: Get total people count
Â  Â  Â  Â  Â  "totalPeopleCount": [
Â  Â  Â  Â  Â  Â  { $unwind: "$allPeople" },
Â  Â  Â  Â  Â  Â  { $count: "count" }
Â  Â  Â  Â  Â  ],
Â  Â  Â  Â  Â  // Pipeline 3: Get zone distribution
Â  Â  Â  Â  Â  "zoneDistribution": [
Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  $group: {
Â  Â  Â  Â  Â  Â  Â  Â  _id: "$zone",
Â  Â  Â  Â  Â  Â  Â  Â  totalPeople: { $sum: { $size: "$allPeople" } }
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  { $lookup: { from: "zones", localField: "_id", foreignField: "_id", as: "zone" } },
Â  Â  Â  Â  Â  Â  { $unwind: { path: "$zone", preserveNullAndEmptyArrays: true } },
Â  Â  Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  Â  $project: { 
Â  Â  Â  Â  Â  Â  Â  Â  _id: 0,
// If a member has no zone, label it 'Unknown'
Â  Â  Â  Â  Â  Â  Â  Â  name: { $ifNull: ["$zone.name", "Unknown"] }, 
Â  Â  Â  Â  Â  Â  Â  Â  totalPeople: 1 
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  ]);

Â  Â  // --- Process the results from the $facet pipeline ---
Â  Â  const results = statsAgg[0];

Â  Â  let totalMales = 0;
Â  Â  let totalFemales = 0;
Â  Â  results.genderCounts.forEach(group => {
Â  Â  Â  if (group._id === 'male') {
Â  Â  Â  Â  totalMales = group.count;
Â  Â  Â  } else if (group._id === 'female') {
Â  Â  Â  Â  totalFemales = group.count;
Â  Â  Â  }
Â  Â  });
Â  Â  
Â  Â  const totalPeople = results.totalPeopleCount[0]?.count || 0;
    // FIX 3: Removed the 'a' typo from this line
Â  Â  const zoneDistribution = results.zoneDistribution; 

Â  Â  // Send the final JSON response
Â  Â  res.json({
Â  Â  Â  totalMembers, // Total families
Â  Â  Â  totalPeople,
Â  Â  Â  totalZones,
Â  Â  Â  totalMales,
Â  Â  Â  totalFemales,
Â  Â  Â  zoneDistribution
Â  Â  });

Â  } catch (err) {
Â  Â  console.error('Dashboard fetch error:', err);
Â  Â  res.status(500).json({ error: err.message });
Â  }
});

// Separate API: People distribution by zone (from your original code)
router.get('/zones-distribution', auth, async (req, res) => {
Â  try {
Â  Â  const data = await getZoneDistribution();
Â  Â  res.json(data);
Â  } catch (err) {
Â  Â  console.error('Error fetching zone distribution:', err);
Â  Â  res.status(500).json({ error: 'Server error' });
Â  }
});

module.exports = router;